// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

model Resource {
  id          String  @id @default(cuid())
  name        String
  is_active   Boolean
  number      Int
  description String
  room        Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId      String

  @@map("resources")
}

model Plan {
  id             String        @id @default(cuid())
  title          String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  room           Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId         String
  start_datetime DateTime
  end_datetime   DateTime
  description    String
  participants   Participant[]

  @@map("plans")
}

model Participant {
  plan        Plan     @relation(fields: [planId], references: [id])
  planId      String // relation scalar field (used in the `@relation` attribute above)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String // relation scalar field (used in the `@relation` attribute above)
  hasAccepted Boolean? @default(false)
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([planId, userId])
  @@map("participant")
}

model Room {
  id          String     @id @default(cuid())
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId   String
  image       String?
  description String
  price       Int
  capacity    Int
  plans       Plan[]
  resources   Resource[]
  title       String

  @@map("rooms")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  logo_base64 String?
  description String?
  users       User[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt()
  rooms       Room[]

  @@map("companies")
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String?       @unique
  username     String        @unique
  password     String
  description  String?
  is_active    Boolean       @default(true)
  image_url    String?
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String?
  sessions     Session[]
  role         String        @default("USER")
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt()
  Plan         Plan[]
  participants Participant[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MailConfig {
  id         String   @id @default(cuid())
  smtpHost   String
  smtpPort   Int
  smtpSecure Boolean
  smtpUser   String
  smtpPass   String
  emailFrom  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("mail_configs")
}
